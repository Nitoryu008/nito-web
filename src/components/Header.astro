---
import { css, cva, type Styles } from "../../styled-system/css";
import {
  bg_extend,
  center,
  circle,
  hstack,
  vstack,
} from "../../styled-system/patterns";

const links = [
  { name: "TOP", target: "/" },
  {
    name: "ABOUT",
    target: "/about",
  },
  {
    name: "BLOG",
    target: "/blog",
  },
  {
    name: "WORKS",
    target: "/works",
  },
  {
    name: "HISTORY",
    target: "/history",
  },
];

const header = hstack({
  width: "100%",
  zIndex: "header",
  justify: "space-between",
  pos: "absolute",
});

const site_name = cva({
  base: {
    fontFamily: "metro",
    fontSize: "5xl",
    paddingBlock: "10",
    paddingInline: "9",
    lineHeight: "1",
  },
  variants: {
    color: {
      light: { color: "text.light" },
      dark: { color: "text.dark" },
    },
  },
});

const nav = center({
  pos: "fixed",
  top: "0",
  left: "0",
  width: "100%",
  height: "100dvh",
  fontFamily: "dots",
  fontSize: "6xl",
  bg: "bg.menu",
  clipPath: "circle(0 at right top)",
  transition: "clip-path .8s",
  transitionTimingFunction: "easeOutExpo",
  _groupExpanded: {
    clipPath: "circle(max(120vw, 120lvh) at right top)",
  },
});

const nav_list = center({
  flexDirection: "column",
  gap: "10",
});

const nav_item = css({
  transition: "letter-spacing 0.3s",
  _hover: {
    letterSpacing: "0.08em",
  },
});

const drawer_circle = circle({
  pos: "fixed",
  top: "5",
  right: "5",
  size: "3em",
  bg: "bg",
  cursor: "pointer",
  zIndex: "header",
  fontSize: "20px",
  border: "normal",
  _groupExpanded: {
    boxShadow: "none",
  },
});
const line: Styles = {
  content: "''",
  display: "block",
  pos: "absolute",
  height: "0.16em",
  width: "1.45em",
  borderRadius: "2em",
  bg: "text",
  transition: "all .8s",
  transitionTimingFunction: "easeOutExpo",
};
const line_gap = "0.5em";
const drawer_lines = vstack({
  justify: "center",
  "& span": {
    ...line,
    _before: { ...line, bottom: line_gap },
    _after: { ...line, top: line_gap },
  },
  _groupExpanded: {
    "& span": {
      bg: "transparent",
      _before: { bottom: "0", transform: "rotate(45deg)" },
      _after: { top: "0", transform: "rotate(-45deg)" },
    },
  },
});
---

<header id="header" aria-expanded="false" class:list={[header, "group"]}>
  <a
    href="/"
    class={site_name({ color: Astro.url.pathname == "/" ? "light" : "dark" })}
  >
    NITO LAB.
  </a>
  <button
    type="button"
    aria-controls="header_nav"
    aria-label="メニューを開く"
    class:list={[drawer_circle, drawer_lines]}
    id="menu_button"
  >
    <span></span>
  </button>
  <nav aria-hidden="true" class={nav} id="header_nav">
    <ul class={nav_list}>
      {
        links.map(({ name, target }) => (
          <li class:list={["nav_item", nav_item]}>
            <a href={target}>{name}</a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  import { gsap, Expo } from "gsap";

  const header = document.getElementById("header") as HTMLElement;
  const button = document.getElementById("menu_button") as HTMLButtonElement;
  const menu = document.getElementById("header_nav") as HTMLElement;

  //メニュー開閉処理
  let isMenuOpen = false;

  const noscroll = (e: Event) => {
    e.preventDefault();
  };

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;

    header.setAttribute("aria-expanded", isMenuOpen.toString());
    button.setAttribute(
      "aria-label",
      isMenuOpen ? "メニューを閉じる" : "メニューを開く"
    );
    menu.setAttribute("aria-hidden", (!isMenuOpen).toString());

    //scroll無効/有効を切り替え

    if (isMenuOpen) {
      document.addEventListener("touchmove", noscroll, { passive: false });
      document.addEventListener("wheel", noscroll, { passive: false });

      gsap.from(".nav_item", {
        x: "6rem",
        opacity: 0,
        stagger: 0.07,
        ease: Expo.easeOut,
      });
    } else {
      document.removeEventListener("touchmove", noscroll);
      document.removeEventListener("wheel", noscroll);
    }
  }

  function handleKeydown(e: KeyboardEvent) {
    if (e.key === "Escape" && isMenuOpen) {
      toggleMenu();
    }
  }

  button.addEventListener("click", toggleMenu);
  document.addEventListener("keydown", handleKeydown);
</script>
