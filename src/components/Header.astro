---
import { css, type Styles } from "../../styled-system/css";
import {
  center,
  circle,
  hstack,
  stack,
  vstack,
} from "../../styled-system/patterns";

const links = [
  {
    name: "ABOUT",
    target: "/about",
  },
  {
    name: "BLOG",
    target: "/blog",
  },
  {
    name: "APPS",
    target: "/apps",
  },
  {
    name: "HISTORY",
    target: "/history",
  },
];

const header = hstack({
  width: "100%",
  pos: "fixed",
  top: "0",
  left: "0",
  zIndex: "header",
  justify: "space-between",
  paddingInline: "px.menu",
  paddingBlock: "4",
  transition: "all 1s",
  color: "text",
  lg: {
    color: "text.light",
    paddingInline: "8",
  },
  _after: {
    content: "''",
    width: "100%",
    height: "0%",
    bg: "linear-gradient(#000b 0%, #0000 100%)",
    pos: "absolute",
    top: "0",
    left: "0",
    display: "block",
    zIndex: "-1",
    opacity: "0",
    transition: ".3s",
  },
  _expanded: {
    "&>a": {
      color: "text",
    },
  },
  "&[data-scrolled=true]": {
    _after: {
      opacity: "1",
      height: "150%",
    },
  },
});

const site_name = css({
  fontFamily: "metro",
  transition: "all .5s",
  fontSize: "5xl",
  pos: "relative",
  zIndex: "header",
  color: "white",
  paddingInline: "7",
  paddingBlock: "1",
  borderRadius: "full",
  border: "transparent",
});

const nav = center({
  pos: "fixed",
  top: "0",
  left: "100%",
  width: "100%",
  height: "100dvh",
  fontFamily: "dots",
  fontSize: "6xl",
  bg: "bg.menu",
  _groupExpanded: {
    left: "0",
  },
  lg: {
    pos: "relative",
    left: "0",
    fontSize: "3xl",
    width: "auto",
    height: "auto",
    bg: "transparent",
  },
});

const nav_list = stack({
  align: "center",
  justify: "center",
  gap: "14",
  lg: {
    flexDirection: "row",
    gap: "10",
  },
});

const drawer_circle = circle({
  size: "3em",
  bg: "bg",
  pos: "relative",
  boxShadow: "normal",
  cursor: "pointer",
  zIndex: "header",
  fontSize: "3xl",
  border: "normal",
  lg: {
    display: "none",
  },
  _groupExpanded: {
    boxShadow: "none",
    bg: "transparent",
  },
});
const line: Styles = {
  content: "''",
  display: "block",
  pos: "absolute",
  height: "0.15em",
  width: "1.45em",
  borderRadius: "20%",
  bg: "text",
};
const line_gap = "0.5em";
const drawer_lines = vstack({
  justify: "center",
  "& span": {
    ...line,
    _before: { ...line, bottom: line_gap },
    _after: { ...line, top: line_gap },
  },
  _groupExpanded: {
    "& span": {
      bg: "transparent",
      _before: { bottom: "0", transform: "rotate(45deg)" },
      _after: { top: "0", transform: "rotate(-45deg)" },
    },
  },
});
---

<header
  id="header"
  aria-expanded="false"
  data-scrolled="false"
  class:list={[header, "group"]}
>
  <a href="/" class={site_name}> NITO LAB. </a>
  <button
    type="button"
    aria-controls="header_nav"
    aria-label="メニューを開く"
    class:list={[drawer_circle, drawer_lines]}
    id="menu_button"
  >
    <span></span>
  </button>
  <nav aria-hidden="true" class={nav} id="header_nav">
    <ul class={nav_list}>
      {
        links.map(({ name, target }) => (
          <li>
            <a href={target}>{name}</a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  const header = document.getElementById("header") as HTMLElement;
  const button = document.getElementById("menu_button") as HTMLButtonElement;
  const menu = document.getElementById("header_nav") as HTMLElement;

  //メニュー開閉処理
  let isMenuOpen = false;

  const noscroll = (e: Event) => {
    e.preventDefault();
  };

  function toggleMenu() {
    isMenuOpen = !isMenuOpen;

    header.setAttribute("aria-expanded", isMenuOpen.toString());
    button.setAttribute(
      "aria-label",
      isMenuOpen ? "メニューを閉じる" : "メニューを開く"
    );
    menu.setAttribute("aria-hidden", (!isMenuOpen).toString());

    //scroll無効/有効を切り替え

    if (isMenuOpen) {
      document.addEventListener("touchmove", noscroll, { passive: false });
      document.addEventListener("wheel", noscroll, { passive: false });
    } else {
      document.removeEventListener("touchmove", noscroll);
      document.removeEventListener("wheel", noscroll);
    }
  }

  function handleKeydown(e: KeyboardEvent) {
    if (e.key === "Escape" && isMenuOpen) {
      toggleMenu();
    }
  }

  button.addEventListener("click", toggleMenu);
  document.addEventListener("keydown", handleKeydown);

  //スクロール時にdata-scrolled属性を付与
  function onScroll() {
    const scrollY = window.scrollY;
    header.setAttribute("data-scrolled", (scrollY > 0).toString());
  }

  window.addEventListener("scroll", onScroll);
  window.addEventListener("load", onScroll);
</script>
